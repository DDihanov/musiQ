1. https://adityaladwa.wordpress.com/2016/05/11/dagger-2-and-mvp-architecture/
  -repo https://github.com/LadwaAditya/DaggerMVP-Tutorial/tree/master/app/src/main/java/com/example/aditya/daggermvp_tutorial
2. https://medium.com/@iammert/new-android-injector-with-dagger-2-part-1-8baa60152abe

3. https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2

4. https://www.youtube.com/watch?v=Zw6jk-UdIW0

5. google architecture examples - https://github.com/googlesamples/android-architecture

especially this, follow this - https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/addedittask

https://stackoverflow.com/questions/43371863/dagger-2-10-android-subcomponents-and-builders

----
text listener
https://github.com/alexander-mironov/AndroidRxJavaAutocomplete/blob/master/app/src/main/java/ru/eightbps/rxjavaautocomplete/MainActivity.java
gankio : https://github.com/haohaozaici/GankIO/blob/master/app/src/main/java/com/example/hao/gankio/MainAdapter.java
cardview tut : https://www.androidhive.info/2016/05/android-working-with-card-view-and-recycler-view/
---

open apis https://github.com/toddmotto/public-apis

old injection method:
We have modules which have a constructor, and @Provides methods that explain how the object is created.
We have components, which include modules(0 or more), and expose methods and getters.
If they expose getters(e.g.) Retrofit getRetrofit(), and we have a class which has a field Retrofit:
we can assign value to that field via retrofit = DaggerAppComponent.builder()
         .getRetrofit();
If the field has @Inject, we call injection method in OnCreate to inject the fields. But this way the class that gets injected
knows the about the injector class. To avoid this:

new injection method:
we have Components, which can have Subcombonents. This invloves creating a Builder module which will provide the 
activities for us. After this we must link the AppComponent with the Builder module by giving it in the modules = {} of the annotation.
 The subcomponent must extend AndroidInjector<TheActivity>
 and have an inner abstract builder class that extends AndroidInjector.Builder<TheActivity> this way, when we use
AndroidInjector.inject(this) in TheActivity --> dagger will know where to look.

https://android.jlelse.eu/android-and-dagger-2-10-androidinjector-5e9c523679a3